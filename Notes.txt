Gherkin language

Given - pre condition
When -actions we need to perform
And - supporting tag
Then - expected results

Recap-
What is framework?
-- it is an organized structire of folders and packages which allows us to write clean and maintanable code

build management tool.
-- maven

pom.xml is the main configuration file in maven project

main -- it is used to write the code for development
test -- it is used to write the code to test the application
-- java -- for tech/coding we use java directory
-- resources - for non tech/non code we use resources

cucumber -- it supports 800
-- we use gherkin language (plain english text) to write the scenarios
-- it works with junit

Scenario -- it is  a test case
Given -- pre condition
When -- actions
And --supporting tag
Then -- results

US 12345 -- Employee search

Scenario -- Search employee by id
Given user is navigated to HRMS Application
When user enters valid admin credentials
And user clicks on login button
And user navigates to employee list page
When user enters valid employee id
And clicks on search button
Then user is able to see employee information

Scenario -- Search employee by name
Given user is navigated to HRMS Application
When user enters valid admin credentials
And user clicks on login button
And user navigates to employee list page
When user enters valid name
And clicks on search button
Then user is able to see employee information

file where we write BDD scenarios is feature file
this file has .feature extension

Class 3
Recap -

we use features file to write our scenarios
-- search employee by id
-- search employee by name

In feature file we write scenarios using gherking language
--Given, when, and, then, scenario, feature

after feature file, we need to create step definitions

---------------
class 4
Recap--
-------
Common methods class in our framework is used to write all the methods we will be using in majority of scenarios
(Code reusability)

sendText method, click

in constants class we provide implicit wait, explicit wait values and test data path

page object model is a design pattern
According to page object model, we create page classes for all the screens available in the application
---------------
Class 5

Recap --

Creating multiple steps classes for multiple features files.

Page object model design pattern

in common methods we are calling page initializers method, this method is going to call the objects pf
page classes which will call the constructor and these constructors will initialize all the web elements
-----------------

Class 6

Recap --

Runner class - we use this class to execute test cases in cucumber

cucumber options:
--features = path of feature file
--glue - to provide the path of steps definitions
--dryRun - it provides step definition to add in steps classes
--monochrome - if it is set to true, it cleans the console
-- tags - we use tags to execute scenarios in groups
    --here we use OR and AND to execute scenarios from 2 or more different tags together

 Background: we take common steps from scenarios and put them in background

Hooks: we use hooks to provide pre condition and post condition to all the scenarios
We always create hooks in steps package

Background vs hooks:
background - it is applicable to one feature file
hooks - it is applicable to all the feature files

----------------

Class 7

--recap
------ hooks - to write pre conditions and post conditions of the project, we use hooks.
@before and @after - 2 types of hooks we have in cucumber
we always write hooks steps package

--
Data driven testing part-
--using examples table and scenario outline
--using data table

